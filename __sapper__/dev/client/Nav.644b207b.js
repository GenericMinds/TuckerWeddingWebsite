import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, k as element, t as text, l as space, m as create_component, c as claim_element, b as children, o as claim_text, e as detach_dev, p as claim_space, q as claim_component, f as attr_dev, g as add_location, h as insert_dev, j as append_dev, r as mount_component, n as noop, u as transition_in, w as transition_out, x as destroy_component } from './client.d5631f27.js';
import MenuIcon from './MenuIcon.63835074.js';

/* src\routes\Nav.svelte generated by Svelte v3.23.2 */
const file = "src\\routes\\Nav.svelte";

function create_fragment(ctx) {
	let nav;
	let div;
	let p;
	let t0;
	let t1;
	let menuicon;
	let current;
	menuicon = new MenuIcon({ $$inline: true });

	const block = {
		c: function create() {
			nav = element("nav");
			div = element("div");
			p = element("p");
			t0 = text("#blameitonfate");
			t1 = space();
			create_component(menuicon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			div = claim_element(nav_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "#blameitonfate");
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			claim_component(menuicon.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1rvgnqb");
			add_location(p, file, 6, 8, 96);
			attr_dev(div, "class", "svelte-1rvgnqb");
			add_location(div, file, 5, 4, 81);
			add_location(nav, file, 4, 0, 70);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, div);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(div, t1);
			mount_component(menuicon, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(menuicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_component(menuicon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Nav> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Nav", $$slots, []);
	$$self.$capture_state = () => ({ MenuIcon });
	return [];
}

class Nav extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Nav",
			options,
			id: create_fragment.name
		});
	}
}

export default Nav;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmF2LjY0NGIyMDdiLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
